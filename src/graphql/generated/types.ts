/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenObjects {
  Fruit: {
    // root type
    description?: string | null; // String
    id?: string | null; // ID
    name?: string | null; // String
  };
  FruitStorage: {
    // root type
    count?: number | null; // Int
    fruitId?: string | null; // String
    id?: string | null; // ID
    limit?: number | null; // Int
  };
  Mutation: {};
  Query: {};
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenObjects;

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars;

export interface NexusGenFieldTypes {
  Fruit: {
    // field return type
    description: string | null; // String
    id: string | null; // ID
    name: string | null; // String
  };
  FruitStorage: {
    // field return type
    count: number | null; // Int
    fruitId: string | null; // String
    id: string | null; // ID
    limit: number | null; // Int
  };
  Mutation: {
    // field return type
    createFruitForFruitStorage: NexusGenRootTypes['FruitStorage'] | null; // FruitStorage
    deleteFruitFromFruitStorage: NexusGenRootTypes['FruitStorage'] | null; // FruitStorage
    removeFruitFromFruitStorage: NexusGenRootTypes['FruitStorage'] | null; // FruitStorage
    storeFruitToFruitStorage: NexusGenRootTypes['FruitStorage'] | null; // FruitStorage
    updateFruitForFruitStorage: NexusGenRootTypes['FruitStorage'] | null; // FruitStorage
  };
  Query: {
    // field return type
    findFruit: NexusGenRootTypes['Fruit'] | null; // Fruit
  };
}

export interface NexusGenFieldTypeNames {
  Fruit: {
    // field return type name
    description: 'String';
    id: 'ID';
    name: 'String';
  };
  FruitStorage: {
    // field return type name
    count: 'Int';
    fruitId: 'String';
    id: 'ID';
    limit: 'Int';
  };
  Mutation: {
    // field return type name
    createFruitForFruitStorage: 'FruitStorage';
    deleteFruitFromFruitStorage: 'FruitStorage';
    removeFruitFromFruitStorage: 'FruitStorage';
    storeFruitToFruitStorage: 'FruitStorage';
    updateFruitForFruitStorage: 'FruitStorage';
  };
  Query: {
    // field return type name
    findFruit: 'Fruit';
  };
}

export interface NexusGenArgTypes {
  Mutation: {
    createFruitForFruitStorage: {
      // args
      description: string; // String!
      limit: number; // Int!
      name: string; // String!
    };
    deleteFruitFromFruitStorage: {
      // args
      forceDelete: boolean; // Boolean!
      name: string; // String!
    };
    removeFruitFromFruitStorage: {
      // args
      amount: number; // Int!
      name: string; // String!
    };
    storeFruitToFruitStorage: {
      // args
      amount: number; // Int!
      name: string; // String!
    };
    updateFruitForFruitStorage: {
      // args
      description: string; // String!
      limit: number; // Int!
      name: string; // String!
    };
  };
  Query: {
    findFruit: {
      // args
      name?: string | null; // String
    };
  };
}

export interface NexusGenAbstractTypeMembers {}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false;
    resolveType: true;
    __typename: false;
  };
};

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
